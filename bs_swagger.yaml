openapi: 3.0.0
info: 
  title: Brawl_Stars_API
  description: >-
    Unofficial Swagger definition for the official Brawl Stars API
  version: 0.0.3
  contact:
    name: "HeyUDude"
    url: "https://github.com/heyudude/pybrawl"
  termsOfService: http://supercell.com/en/terms-of-service/
  license:
    name: GNU Lesser General Public License 3.0
    url: https://www.gnu.org/licenses/lgpl-3.0.html
tags:
  - name: players
    description: Fetch player information
  - name: clubs
    description: Fetch club information
  - name: rankings
    description: Fetch ranking information
  - name: brawlers
    description: Fetch brawler information

paths:
  '/players/{playerTag}':
   get:
      summary: Get player information
      description: >
        Get information about a single player by player tag. Player tags can be found either in game or by from club member lists.
        Note that player tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example player tag '#2ABC' would become '%232ABC' in the URL.
      tags:
        - players
      operationId: getPlayer
      parameters:
        - name: playerTag
          in: path
          description: Tag of the player to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'

  '/players/{playerTag}/battlelog':
   get:
      summary: Get player's battlelog
      description: Get information about a single player's battlelog
      tags:
        - battlelog
      operationId: getBattlelog
      parameters:
        - name: playerTag
          in: path
          description: |
            Tag of the player's battle log to retrieve.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of items returned in the response.
          required: false
          schema:
            type: integer
        - name: after
          in: query
          description: >
            Return only items that occur after this marker. After marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
        - name: before
          in: query
          description: >
            Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerBattleLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'

  '/clubs/{clubTag}':
   get:
      summary: Get club information
      description: >
        Get information about a single club by club tag. Club tags can be found either in game or by from club member lists.
        Note that club tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example player tag '#2ABC' would become '%232ABC' in the URL.
      tags:
        - clubs
      operationId: getClub
      parameters:
        - name: clubTag
          in: path
          description: |
            Tag of the club to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'

  '/clubs/{clubTag}/members':
   get:
      summary: Get members of a club
      description: >
        Get information about the mmebers in a single club by club tag. Club tags can be found either in game or by from club member lists.
        Note that club tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example player tag '#2ABC' would become '%232ABC' in the URL.
      tags:
        - clubs
      operationId: getClubMembers
      parameters:
        - name: clubTag
          in: path
          description: |
            Tag of the club to retrieve.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of items returned in the response.
          required: false
          schema:
            type: integer
        - name: after
          in: query
          description: >
            Return only items that occur after this marker. After marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
        - name: before
          in: query
          description: >
            Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubMemberList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'

  '/clubs/{countryCode}/players':
   get:
      summary: Get player ranking for a country
      description: >
        Get information about the ranking of players in a single country.
      tags:
        - clubs
      operationId: getRankingPlayers
      parameters:
        - name: countryCode
          in: path
          description: |
            Country code of the country player list to retrieve.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of items returned in the response.
          required: false
          schema:
            type: integer
        - name: after
          in: query
          description: >
            Return only items that occur after this marker. After marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
        - name: before
          in: query
          description: >
            Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RankingPlayerList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'

  '/clubs/{countryCode}/clubs':
   get:
      summary: Get club ranking for a country
      description: >
        Get information about the ranking of clubs in a single country.
      tags:
        - clubs
      operationId: getRankingClubs
      parameters:
        - name: countryCode
          in: path
          description: |
            Country code of the country club list to retrieve.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of items returned in the response.
          required: false
          schema:
            type: integer
        - name: after
          in: query
          description: >
            Return only items that occur after this marker. After marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
        - name: before
          in: query
          description: >
            Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RankingClubList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'

  '/clubs/{countryCode}/brawlers/{brawlerId}':
   get:
      summary: Get brawler ranking for a country
      description: >
        Get information about the ranking of brawlers in a single country.
      tags:
        - clubs
      operationId: getRankingBrawlers
      parameters:
        - name: countryCode
          in: path
          description: |
            Country code of the country club list to retrieve.
          required: true
          schema:
            type: string
        - name: brawlerId
          in: path
          description: |
            Brawler ID of the brawler rank to retrieve.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of items returned in the response.
          required: false
          schema:
            type: integer
        - name: after
          in: query
          description: >
            Return only items that occur after this marker. After marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
        - name: before
          in: query
          description: >
            Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RankingBrawlerList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'
  
servers:
  - url: 'https://api.brawlstars.com/{basePath}'
    description: 'Supercell API server'
    variables:
      basePath:
        default: v1

security:
  - JWT: []

components:
  securitySchemes:
    JWT:
        type: http
        scheme: bearer
        bearerFormat: JWT

  responses:
    BadRequest:
      description: Client provided incorrect parameters for the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: >
        Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestThrottled:
      description: >
        Request was throttled, because amount of requests was above the threshold defined for the used API token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnknownException:
      description: |
        Unknown error happened when handling the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InMaintenance:
      description: |
        Service is temporarily unavailable because of maintenance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
 
  schemas:
    Error:
      type: object
      properties:
        reason:
          type: string
        message:
          type: string
        detail:
          type: string

    Battle:
      type: object
      properties:
        mode:
          type: string
        type:
          type: string
        rank:
          type: integer
        trophyChange:
          type: integer
        players:
          type: array
          items:
            $ref: "#/components/schemas/BattleLogTeam"

    BattleLogTeam:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        brawler:
          type: array
          items:
            $ref: "#/components/schemas/BattleLogBrawler"

    BattleList:
      type: object
      properties:
        battleTime:
          type: string
        event:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        battle:
          type: array
          items:
            $ref: "#/components/schemas/Battle"

    BattleLogBrawler:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        power:
          type: integer
        trophies:
          type: integer
        paging:
          $ref: '#/components/schemas/SearchPaging'     
    
    Brawler:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        power:
          type: integer
        rank:
          type: integer
        trophies:
          type: integer
        highestTrophies:
          type: integer
        starPowers:
          type: array
          items:
            $ref: '#/components/schemas/StarPowers'
        gadgets:
          type: array
          items:
            $ref: '#/components/schemas/Gadgets'

    BrawlerList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Brawler'

    Club:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        trophies:
          type: integer
        requiredTrophies:
          type: integer
        members:
          type: array
          items:
            $ref: '#/components/schemas/ClubMember'
 
    ClubMember:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        trophies:
          type: integer
        role:
          type: string
        nameColor:
          type: string

    ClubMemberList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ClubMember'
        paging:
          $ref: '#/components/schemas/SearchPaging'
            
    Event:
      type: object
      properties:
        id:
          type: integer
        mode:
          type: string
        map:
          type: string

    Gadgets:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    MemberOfClub:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string

    StarPowers:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Player:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        nameColor:
          type: array
          items:
            properties:
              id:
                type: integer
        icon:
          type: string
        trophies:
          type: integer
        highestTrophies:
          type: integer
        highestPowerPlayPoints:
          type: integer
        expLevel:
          type: integer
        expPoints:
          type: integer
        isQualifiedFromChampionshipChallenge:
          type: boolean
        v3vs3Victories:
          type: integer
        soloVictories:
          type: integer
        duoVictories:
          type: integer
        bestRoboRumbleTime:
          type: integer
        bestTimeAsBigBrawler:
          type: integer
        club:
          $ref: '#/components/schemas/MemberOfClub'
        brawlers:
          type: array
          items:
            $ref: '#/components/schemas/Brawler'

    PlayerBattleLog:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/BattleList"
        paging:
          $ref: '#/components/schemas/SearchPaging'

    RankingPlayerList:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        nameColor:
          type: string
        trophies:
          type: integer
        rank:
          type: integer
        club:
          $ref: '#/components/schemas/MemberOfClub'
        paging:
          $ref: '#/components/schemas/SearchPaging'

    RankingClubList:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        trophies:
          type: integer
        rank:
          type: integer
        membercount:
          type: integer
        paging:
          $ref: '#/components/schemas/SearchPaging'

    RankingBrawlerList:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        nameColor:
          type: string
        trophies:
          type: integer
        club:
          $ref: '#/components/schemas/MemberOfClub'
        paging:
          $ref: '#/components/schemas/SearchPaging'

    SearchPaging:
      type: object
      properties:
        cursors:
          type: object
          properties:
            after:
              type: string
            before:
              type: string
#EOF
